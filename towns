library(dplyr)
library(tidyverse)
# library(lubridate)
library(ggplot2)

# Read in full dataset
hp <- read.csv("PPR-ALL.csv", encoding="UTF-8", sep=",",header=F) # header=F as wouldn't load otherwise
head(hp)

# Add column names
names(hp) <- c("sale_date","address","post_code","county","price","nfmp","vx","desc","size_desc")

# Remove redundant header names (row 1)
hp<-hp[-1, ] 

# Remove euro symbol and comma from price values
hp$price <- gsub('[\x80]','', hp$price)
hp$price <- gsub('[,]','', hp$price)
str(hp)

# filter to only have desired counties
hp1 <- filter(hp, (county=="Dublin" | county== "Kildare" | county == "Galway" | county == "Cork" | county == "Limerick"))

# convert price to numeric
hp2 <- hp1 %>% mutate_at("price", as.numeric)

# convert sale_date to numeric with just year as observation
hp2 <- hp2 %>% mutate_at("sale_date", as.character)
hp2$sale_date <- substr(hp2$sale_date, start = 7, stop = 10)
hp2 <- hp2 %>% mutate_at("sale_date", as.numeric)
head(hp2)

# remove funny symbols from address
hp2$address <-str_replace_all(hp2$address,"[^[:graph:]]", " ")

# change addresses to all lowercase to facilitate town name search
hp2 <- hp2 %>% mutate(address = tolower(address))
hp2 <- hp2 %>% mutate(county = tolower(county))

# extract the towns by address and add an additional column 'town'
smithfield <- hp2[grepl("smithfield", hp2[["address"]]) & grepl("dublin", hp2[["county"]]), ]
smithfield$town <- rep("Smithfield",nrow(smithfield))

dundrum <- hp2[grepl("dundrum", hp2[["address"]]) & grepl("dublin", hp2[["county"]]), ]
dundrum$town <- rep("Dundrum",nrow(dundrum))

maynooth <- hp2[grepl("maynooth", hp2[["address"]]) & grepl("kildare", hp2[["county"]]), ]
maynooth$town <- rep("Maynooth",nrow(maynooth))

newbridge <- hp2[grepl("newbridge", hp2[["address"]]) & grepl("kildare", hp2[["county"]]), ]
newbridge$town <- rep("Newbridge",nrow(newbridge))

cork_city <- hp2[grepl("cork city", hp2[["address"]]) & grepl("cork", hp2[["county"]]), ]
cork_city$town <- rep("Cork City",nrow(cork_city))

blarney <- hp2[grepl("blarney", hp2[["address"]]) & grepl("cork", hp2[["county"]]), ]
blarney$town <- rep("Blarney",nrow(blarney))

mallow <- hp2[grepl("mallow", hp2[["address"]]) & grepl("cork", hp2[["county"]]), ]
mallow$town <- rep("Mallow",nrow(mallow))

charleville <- hp2[grepl("charleville", hp2[["address"]]) & grepl("cork", hp2[["county"]]), ]
charleville$town <- rep("Charleville",nrow(charleville))

galway_city <- hp2[grepl("galway city", hp2[["address"]]) & grepl("galway", hp2[["county"]]), ]
galway_city$town <- rep("Galway City",nrow(galway_city))

oranmore <- hp2[grepl("oranmore", hp2[["address"]]) & grepl("galway", hp2[["county"]]), ]
oranmore$town <- rep("Oranmore",nrow(oranmore))

athenry <- hp2[grepl("athenry", hp2[["address"]]) & grepl("galway", hp2[["county"]]), ]
athenry$town <- rep("Athenry",nrow(athenry))

loughrea <- hp2[grepl("loughrea", hp2[["address"]]) & grepl("galway", hp2[["county"]]), ]
loughrea$town <- rep("Loughrea",nrow(loughrea))

limerick_city <- hp2[grepl("limerick city", hp2[["address"]]) & grepl("limerick", hp2[["county"]]), ]
limerick_city$town <- rep("Limerick ",nrow(limerick_city))

croom <- hp2[grepl("croom", hp2[["address"]]) & grepl("limerick", hp2[["county"]]), ]
croom$town <- rep("Croom ",nrow(Croom))

castletroy <- hp2[grepl("castletroy", hp2[["address"]]) & grepl("limerick", hp2[["county"]]), ]
castletroy$town <- rep("castletroy ",nrow(Castletroy))

abbeyfeale <- hp2[grepl("abbeyfeale", hp2[["address"]]) & grepl("limerick", hp2[["county"]]), ]
abbeyfeale$town <- rep("abbeyfeale ",nrow(Abbeyfeale))

# combine town datasets together
hp_town <- rbind(smithfield, dundrum, maynooth, newbridge, cork_city, blarney, mallow, charleville, galway_city, oranmore, athenry, loughrea, limerick_city, croom, castletroy, abbeyfeale)

filter(hp_town, price > 1000000)

hp_town1 <- hp_town[-c(12,38,48,58),]

hp_town1$price2 <- hp_town1$price/1000
#max(hp_town$price2)
# plot house price over time per town
ggplot(data = hp_town1) +
  geom_point(mapping = aes(x=sale_date, y=price2)) +
  facet_wrap(~town) + 
  scale_x_continuous(limits= c(2010, 2020), breaks=c(2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020))

